{"version":3,"sources":["components/AddPerson.js","components/Luettelo.js","services/persons.js","components/Notification.js","App.js","index.js"],"names":["AddPerson","addNewName","newName","newNumber","nameChange","numberChange","onSubmit","value","onChange","type","Number","person","onDelete","name","number","onClick","Luettelo","persons","filtteri","filter","length","toLowerCase","indexOf","map","id","pUrl","exportti","getPersons","axios","get","then","res","data","addPerson","personObject","post","deletePerson","delete","updatePerson","put","Notification","message","msg","className","App","useState","setPersons","setNewName","setNewNumber","setFilter","notification","setNotification","notify","setTimeout","useEffect","personServer","event","preventDefault","newPerson","window","confirm","oldPerson","find","p","concat","catch","errori","response","error","target","nimi","uudetPersoonat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27468088.chunk.js","sourcesContent":["const AddPerson = ({addNewName, newName, newNumber, nameChange, numberChange}) => {\r\n    return (\r\n      <form onSubmit={addNewName}>\r\n          <div>\r\n            name: <input value={newName} onChange={nameChange} /> <br />\r\n            number: <input value={newNumber} onChange={numberChange} />\r\n          </div>\r\n          <div>\r\n            <button type=\"submit\">add</button>\r\n          </div>\r\n        </form>\r\n    )\r\n  }\r\n\r\n  export default AddPerson","const Luettelo = ({persons, filtteri, onDelete}) => {\r\n    return (\r\n      <div>\r\n        {persons.filter(person => {\r\n          if (filtteri.length === 0 || person.name.toLowerCase().indexOf(filtteri.toLowerCase()) !== -1) return true\r\n          return false\r\n        }).map(person => <Number key={person.id} \r\n                                 person={person} \r\n                                 onDelete={() => onDelete(person.id)} />)}\r\n      </div>\r\n    )\r\n  }\r\n  const Number = ({person, onDelete}) => {\r\n    return (\r\n      <div>{person.name} - {person.number} <button onClick={onDelete}>x</button></div>\r\n    )\r\n  }\r\n\r\n  export default Luettelo","import axios from 'axios'\r\n\r\nconst pUrl = \"/persons\"\r\n\r\nconst getPersons = () => {\r\n    const kysely = axios.get(pUrl)\r\n    return kysely.then(res => res.data)\r\n}\r\nconst addPerson = (personObject) => {\r\n    const kysely = axios.post(pUrl, personObject)\r\n    return kysely.then(res => res.data)\r\n}\r\nconst deletePerson = (id) => {\r\n    const kysely = axios.delete(`${pUrl}/${id}`)\r\n    return kysely.then(res => res.data)\r\n}\r\nconst updatePerson =( id, personObject) => {\r\n    const kysely = axios.put(`${pUrl}/${id}`, personObject)\r\n    return kysely.then(res => res.data)\r\n}\r\nconst exportti = {\r\n    getPersons: getPersons,\r\n    addPerson: addPerson,\r\n    deletePerson: deletePerson,\r\n    updatePerson: updatePerson,\r\n}\r\n\r\nexport default exportti","const Notification = ({message}) => {\r\n\r\n    if (message.msg === null) return null\r\n\r\n    if (message.type === \"error\") {\r\n        return (\r\n            <div className=\"errorMessage\">\r\n                {message.msg}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"notifyMessage\">\r\n            {message.msg}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport AddPerson from './components/AddPerson'\nimport Luettelo from './components/Luettelo'\nimport personServer from './services/persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const [filtteri, setFilter] = useState('')\n  const [notification, setNotification] = useState({msg: null, type: null})\n\n  const filterChange = (event) => setFilter(event.target.value)\n  const numberChange = (event) => setNewNumber(event.target.value)\n  const nameChange = (event) => setNewName(event.target.value)\n  const addNewName = (event) => {\n    event.preventDefault()\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n    let i = persons.filter(person => person.name === newName).length\n    if (i > 0) {\n      if (window.confirm(`Henkilö ${newName} on jo listalla. Päivitetäänkö puhelinnumero?`)) {\n        const oldPerson = persons.find(p => p.name === newName)\n        const newPerson = {...oldPerson, number: newNumber}\n//        console.log(\"Päivitetään\", oldPerson, newPerson)\n        personServer.updatePerson(oldPerson.id, newPerson).then(res => {\n          setPersons( persons.filter(p=> p.id !== res.id).concat(res))\n          notify(\"Numero päivitetty onnistuneesti!\")\n        }).catch(() => {\n          notify(\"Henkilön tietoja ei lödy palvelimelta.\", \"error\")\n        })\n      }\n    } else {\n        personServer.addPerson(newPerson).then(res => {\n          setPersons(persons.concat(res))\n          notify(`Henkilö ${newPerson.name} lisättiin!`)\n        }).catch((errori) => {\n          notify(`Virhe! Error: ${errori.response.data.error}`, \"error\")\n        })\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n  const deletePerson = (id) => {\n    const nimi = persons.find(p => p.id === id).name\n    if (window.confirm(`Poistetaanko ${nimi} varmasti!?`)) {\n      personServer.deletePerson(id).then(res => {\n        const uudetPersoonat = persons.filter(p => p.id !== id)\n        setPersons(uudetPersoonat)\n        notify(`Henkilö ${nimi} poistettiin onnistuneesti.`)\n      }).catch(() => {\n        notify(\"Henkilön tietoja ei lödy palvelimelta.\", \"error\")\n      })\n\n    }\n  }\n  const notify = (msg, type) => {\n    setNotification({msg, type})\n    setTimeout( () => {\n      setNotification({msg: null, type: null})\n    }, 5000)\n  }\n  useEffect(() => {\n      personServer.getPersons().then(res => {\n        setPersons(res)\n      })\n  },[])\n  return (\n    <div>\n      <Notification message={notification} />\n      <h2>Phonebook</h2>\n      <AddPerson addNewName={addNewName} newName={newName} newNumber={newNumber}\n                nameChange={nameChange} numberChange={numberChange} />\n      <p>Filtteri: <input onChange={filterChange}/></p>\n      <h2>Numbers</h2>\n        <Luettelo persons={persons} filtteri={filtteri} onDelete={deletePerson} />\n    </div>\n  )\n\n}\n\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}